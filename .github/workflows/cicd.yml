name: KBOT-CICD

on:
  push:
    branches: [ main ]  # або "develop", якщо працюєш у dev-гілці
  pull_request:
    branches: [ main ]

env:
  TARGETARCH: amd64
  TARGETOS: linux
  CGO_ENABLED: 0

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
          cache: true

      - name: Lint Go code
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        run: make test

      - name: Build binary
        run: make build TARGETARCH=${{ env.TARGETARCH }} TARGETOS=${{ env.TARGETOS }}

  cd:
    name: CD
    needs: ci
    if: github.ref == 'refs/heads/main'  # Працює лише для main-гілки
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
          cache: true

      - name: Set VERSION
        id: set_version
        run: |
          GIT_TAG=$(git describe --tags --abbrev=0)
          GIT_COMMIT=$(git rev-parse --short HEAD)
          VERSION="${GIT_TAG}-${GIT_COMMIT}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to ghcr.io
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            -t ghcr.io/${{ github.repository_owner }}/kbot:${{ env.VERSION }}-linux-amd64 \
            --push .

      - name: Update Helm values.yaml
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.image.tag = strenv(VERSION) |
                   .image.arch = strenv(TARGETARCH) |
                   .image.os = strenv(TARGETOS)' helm/values.yaml

      - name: Commit updated Helm values.yaml
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add helm/values.yaml
          git commit -m "chore: update image tag to $VERSION"
          git push

      - name: Cleanup build artifacts
        run: make clean TARGETARCH=${{ env.TARGETARCH }}
